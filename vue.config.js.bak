//vue.config.js官网地址  https://cli.vuejs.org/zh/config/#pages
"use strict" //的目的是指定代码在严格条件下执行。严格模式下你不能使用未声明的变量。

const path = require('path')
const buildConf = require('./build.config')
const packageConf = require('./package.json')

module.exports = {
    transpileDependencies: [true], //默认情况下 babel-loader 会忽略所有 node_modules 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖
    publicPath: process.env.NODE_ENV === 'production' ? '/production-sub-path/' : '/', //部署应用包时的基本URL / 即 http://localhost:8080/的 最后一个路径/
    outputDir: 'dist', //当运行 vue-cli-service build 时生成的生产环境构建文件的目录。注意目标目录的内容在构建之前会被清除 (构建时传入 --no-clean 可关闭该行为)
    assetsDir: 'static', //放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录,   Default: ''
    indexPath: 'index.html', //指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。
    filenameHashing: false, //默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。如果你无法使用 Vue CLI 生成的 index HTML，你可以通过将这个选项设为 false 来关闭文件名哈希
    pages: {}, //查看官网文档
    lintOnSave: process.env.NODE_ENV === 'development',
    runtimeCompiler: true, //是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右
    productionSourceMap: false, //如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。
    crossorigin: undefined, //设置生成的 HTML 中 <link rel="stylesheet"> 和 <script> 标签的 crossorigin 属性。
    integrity: false, //在生成的 HTML 中的 <link rel="stylesheet"> 和 <script> 标签上启用 Subresource Integrity (SRI)。如果你构建后的文件是部署在 CDN 上的，启用该选项可以提供额外的安全性
    configureWebpack: {
        //@路径走src文件夹
        resolve: {
            alias: {
                '@': path.resolve(__dirname, './src')
            }
        }
    },
    chainWebpack(config) {//是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。
        // set preserveWhitespace
        config.module
            .rule('vue')
            .use('vue-loader')
            .loader('vue-loader')
            .tap(options => {
                options.compilerOptions.preserveWhitespace = true
                return options
            })
            .end()
        config
            // https://webpack.js.org/configuration/devtool/#development
            .when(process.env.NODE_ENV === 'development',
                config => config.devtool('cheap-source-map')
            )

        config
            .when(process.env.NODE_ENV !== 'development',
                config => {

                    // 不打包 begin
                    // 1.目前已经测试通过[vue,axios,echarts]可以cdn引用，其它组件测试通过后可继续添加
                    // 2.此处添加不打包后，需在public/index.html head中添加相应cdn资源链接
                    config.set('externals', buildConf.cdns.reduce((p, a) => {
                        p[a.name] = a.scope
                        return p
                    }, {}))
                    // 不打包 end

                    config.plugin('html')
                        .tap(args => {
                            if (buildConf.title) {
                                args[0].title = buildConf.title
                            }
                            if (buildConf.cdns.length > 0) {
                                args[0].cdns = buildConf.cdns.map(conf => {
                                    if (conf.path) {
                                        conf.js = `${buildConf.baseCdnUrl}${conf.path}`
                                    } else {
                                        conf.js = `${buildConf.baseCdnUrl}/${conf.name}/${packageConf.dependencies[conf.name].replace('^', '')}/${conf.name}.min.js`
                                    }

                                    return conf
                                })
                            }
                            return args
                        })

                    config
                        .plugin('ScriptExtHtmlWebpackPlugin')
                        .after('html')
                        .use('script-ext-html-webpack-plugin', [{
                            // `runtime` must same as runtimeChunk name. default is `runtime`
                            inline: /single\..*\.js$/
                        }])
                        .end()
                    config
                        .optimization.splitChunks({
                        chunks: 'all',
                        cacheGroups: {
                            libs: {
                                name: 'chunk-libs',
                                test: /[\\/]node_modules[\\/]/,
                                priority: 10,
                                chunks: 'initial' // only package third parties that are initially dependent
                            },
                            elementUI: {
                                name: 'chunk-elementUI', // split elementUI into a single package
                                priority: 20, // the weight needs to be larger than libs and app or it will be packaged into libs or app
                                test: /[\\/]node_modules[\\/]_?element-ui(.*)/ // in order to adapt to cnpm
                            },
                            commons: {
                                name: 'chunk-commons',
                                test: path.join(__dirname, 'src/components'), // can customize your rules
                                minChunks: 3, //  minimum common number
                                priority: 5,
                                reuseExistingChunk: true
                            }
                        }
                    })
                    config.optimization.runtimeChunk('single')
                }
            )
    },
    devServer: {
        host: '127.0.0.1',
        port: 8080,
        open: true,
        client: {
            overlay: {
                warnings: false,
                errors: true
            },
        },
        proxy: {
            // 把key的路径代理到target位置
            // detail: https://cli.vuejs.org/config/#devserver-proxy
            [process.env.VUE_APP_BASE_API]: { //需要代理的路径   例如 '/api'
                target: `http://123.60.148.210:8888/`, //代理到 目标路径
                changeOrigin: true,
                pathRewrite: { // 修改路径数据
                    ['^' + process.env.VUE_APP_BASE_API]: '' // 举例 '^/api:""' 把路径中的/api字符串删除
                }
            }
        },
    },

}
